{"version":3,"sources":["main.min.js"],"names":["money","isNumber","n","isNaN","parseFloat","isFinite","start","prompt","appData","income","addIncome","addNewExpenses","addExpenses","deposit","percentDeposit","moneyDeposit","mission","period","expenses","addExpense","asking","itemIncome","cashIncome","check","reg","textError","confirm","test","this","toLowerCase","split","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","item","value","trim","charAt","toUpperCase","slice","push","err","i","expense","amount","budget","budgetDay","budgetMonth","expensesMonth","getExpensesMonth","sum","key","getBudget","getTargetMonth","getStatusIncome","console","log","getInfoDeposit","calcSavedMoney","join","resGetTargetMonth","Math","ceil"],"mappings":"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","file":"main.min.js","sourcesContent":["\"use strict\";\n\nvar isNumber = function isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar money,\n    start = function start() {\n  do {\n    money = prompt('Ваш месячный доход?');\n  } while (!isNumber(money));\n};\n\nstart();\nvar appData = {\n  income: {},\n  addIncome: [],\n  addNewExpenses: [],\n  addExpenses: [],\n  deposit: false,\n  percentDeposit: 0,\n  moneyDeposit: 0,\n  mission: 300000,\n  period: 12,\n  expenses: {},\n  addExpense: [],\n  asking: function asking() {\n    var reg = /^[a-zA-zа-яА-ЯёЁ]+$/;\n    var itemIncome,\n        cashIncome,\n        check,\n        textError = '';\n\n    do {\n      if (confirm('Есть ли у вас дополнительный источник заработка?' + ' : ' + textError)) {\n        itemIncome = prompt('Какой у вас дополнительный заработок?');\n        cashIncome = prompt('Сколько в месяц вы на этом зарабатываете?');\n\n        if (reg.test(itemIncome) && isNumber(cashIncome)) {\n          this.income[itemIncome] = cashIncome;\n          check = true;\n          textError = '';\n        } else {\n          check = false;\n          textError = 'Неверный ввод!';\n        }\n      } else check = true;\n    } while (!check);\n\n    var addExpenses = prompt('Перечислите возможные расходы за рассчитываемый период через запятую');\n    this.addNewExpenses = addExpenses.toLowerCase().split(',');\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = this.addNewExpenses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n        item = item.trim();\n        item = item.charAt(0).toUpperCase() + item.slice(1);\n        this.addExpenses.push(item);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    this.deposit = confirm('Есть ли у вас депозит в банке?');\n\n    for (var i = 0; i < 2; i++) {\n      var expense = prompt('Введите обязательную статью расходов?' + ' : ' + textError),\n          amount = void 0;\n\n      if (reg.test(expense)) {\n        do {\n          amount = prompt('Во сколько это обойдется?');\n        } while (!isNumber(amount));\n\n        this.expenses[expense] = +amount;\n      } else {\n        --i;\n        textError = 'Неверный ввод!';\n      }\n    }\n  },\n  budget: 0,\n  budgetDay: 0,\n  budgetMonth: 0,\n  expensesMonth: 0,\n  //сумма расходов\n  getExpensesMonth: function getExpensesMonth() {\n    var sum = 0;\n\n    for (var key in this.expenses) {\n      sum += this.expenses[key];\n    }\n\n    return sum;\n  },\n  //доход-расход\n  getBudget: function getBudget() {\n    this.budgetMonth = +money - this.getExpensesMonth();\n    this.budgetDay = this.budgetMonth / 30;\n  },\n  //период достижения цели\n  getTargetMonth: function getTargetMonth() {\n    return +this.mission / +this.budgetMonth;\n  },\n  getStatusIncome: function getStatusIncome() {\n    if (this.budgetDay >= 1200) {\n      return \"У вас высокий уровень дохода\";\n    } else if (this.budgetDay > 600 && this.budgetDay < 1200) {\n      return \"У вас средний уровень дохода\";\n    } else if (this.budgetDay <= 600) {\n      return \"К сожалению у вас уровень дохода ниже среднего\";\n    } else console.log(\"Что то пошло не так\");\n  },\n  getInfoDeposit: function getInfoDeposit() {\n    if (this.deposit) {\n      var percentDeposit, moneyDeposit;\n\n      do {\n        percentDeposit = prompt('Какой годовой процент?', '5');\n        moneyDeposit = prompt('Какоя сумма заложена?', '10000');\n      } while (!(isNumber(percentDeposit) && isNumber(moneyDeposit)));\n\n      this.percentDeposit = percentDeposit;\n      this.moneyDeposit = moneyDeposit;\n    }\n  },\n  calcSavedMoney: function calcSavedMoney() {\n    return this.budgetMonth * this.period;\n  }\n};\nappData.asking();\nappData.getBudget();\nappData.getInfoDeposit();\nconsole.log(\"Расходы за месяц: \" + appData.getExpensesMonth());\nconsole.log(\"Список расходов: \" + appData.addExpenses.join(', '));\nvar resGetTargetMonth = Math.ceil(appData.getTargetMonth());\n\nif (resGetTargetMonth > 0) {\n  console.log(\"Цель будет достигнута за: \" + resGetTargetMonth + \" месяцев\");\n} else {\n  console.log(\"Цель не будет достигнута\");\n}\n\nconsole.log(appData.getStatusIncome());\nconsole.log(\"Наша программа включает в себя данные:\");\n\nfor (var key in appData) {\n  console.log(key + \": \" + appData[key]);\n}"]}