{"version":3,"sources":["main.min.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","money","isNumber","n","isNaN","parseFloat","isFinite","income","addExpenses","prompt","deposit","confirm","mission","period","start","showTypeOf","data","console","log","length","toLowerCase","expenses","amount","addExpense","getExpensesMonth","sum","i","push","expensesMonth","getAccumulatedMonth","spending","accumulatedMonth","getTargetMonth","budgetDay","resGetTargetMonth","Math","ceil","floor","getStatusIncome"],"mappings":"AAAA,aAEA,SAASA,QAAQC,GAAwT,OAAtOD,QAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,GAExV,IAIIK,MAJAC,SAAW,SAAkBC,GAC/B,OAAQC,MAAMC,WAAWF,KAAOG,SAASH,IAIvCI,OAAS,UACTC,YAAcC,OAAO,wEACrBC,QAAUC,QAAQ,kCAClBC,QAAU,IACVC,OAAS,GAETC,MAAQ,WACV,KACEb,MAAQQ,OAAO,wBACPP,SAASD,WAGrBa,QAEA,IAAIC,WAAa,SAAoBC,GACnCC,QAAQC,IAAIF,EAAMrB,QAAQqB,KAG5BD,WAAWd,OACXc,WAAWR,QACXQ,WAAWL,SACXO,QAAQC,IAAIV,YAAYW,QACxBF,QAAQC,IAAI,gBAAkBL,OAAS,YACvCI,QAAQC,IAAI,mBAAqBN,QAAU,WAC3CK,QAAQC,IAAIV,YAAYY,eACxB,IAAIC,SACAC,OACAC,WAAa,GAEbC,iBAAmB,WAGrB,IAFA,IAAIC,EAAM,EAEDC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAG1B,IAFAL,SAAWZ,OAAO,yCAGhBa,OAASb,OAAO,8BACRP,SAASoB,UAEnBC,WAAWI,KAAKN,UAChBI,IAAQH,OAGV,OAAOG,GAGLG,cAAgBJ,mBACpBP,QAAQC,IAAI,gBAAkBK,YAC9BN,QAAQC,IAAI,qBAAuBU,eAEnC,IAAIC,oBAAsB,SAA6BtB,EAAQuB,GAC7D,OAAQvB,GAAUuB,GAGhBC,iBAAmBF,oBAAoB5B,MAAO2B,eAClDX,QAAQC,IAAI,wBAA0Ba,kBAEtC,IAAIC,eAAiB,SAAwBpB,EAASmB,GACpD,OAAQnB,GAAWmB,GAGjBE,UAAYF,iBAAmB,GAC/BG,kBAAoBC,KAAKC,KAAKJ,eAAepB,QAASmB,mBAElC,EAApBG,kBACFjB,QAAQC,IAAI,6BAA+BgB,kBAAoB,YAE/DjB,QAAQC,IAAI,4BAGdD,QAAQC,IAAI,mBAAqBiB,KAAKE,MAAMJ,YAE5C,IAAIK,gBAAkB,WACpB,OAAiB,MAAbL,UACK,+BACc,IAAZA,WAAmBA,UAAY,KACjC,+BACEA,WAAa,IACf,sDACFhB,QAAQC,IAAI,wBAGrBD,QAAQC,IAAIoB","file":"main.min.js","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar isNumber = function isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\nvar money,\n    income = \"Фриланс\",\n    addExpenses = prompt('Перечислите возможные расходы за рассчитываемый период через запятую'),\n    deposit = confirm('Есть ли у вас депозит в банке?'),\n    mission = 300000,\n    period = 12;\n\nvar start = function start() {\n  do {\n    money = prompt('Ваш месячный доход?');\n  } while (!isNumber(money));\n};\n\nstart();\n\nvar showTypeOf = function showTypeOf(data) {\n  console.log(data, _typeof(data));\n};\n\nshowTypeOf(money);\nshowTypeOf(income);\nshowTypeOf(deposit);\nconsole.log(addExpenses.length);\nconsole.log(\"Период равен \" + period + \" месяцев\");\nconsole.log(\"Цель заработать \" + mission + \" рублей\");\nconsole.log(addExpenses.toLowerCase());\nvar expenses,\n    amount,\n    addExpense = []; //сумма расходов\n\nvar getExpensesMonth = function getExpensesMonth() {\n  var sum = 0;\n\n  for (var i = 0; i < 2; i++) {\n    expenses = prompt('Введите обязательную статью расходов?');\n\n    do {\n      amount = prompt('Во сколько это обойдется?');\n    } while (!isNumber(amount));\n\n    addExpense.push(expenses);\n    sum += +amount;\n  }\n\n  return sum;\n};\n\nvar expensesMonth = getExpensesMonth();\nconsole.log(\"Доп.расходы: \" + addExpense);\nconsole.log(\"Расходы за месяц: \" + expensesMonth); //доход-расход\n\nvar getAccumulatedMonth = function getAccumulatedMonth(income, spending) {\n  return +income - +spending;\n};\n\nvar accumulatedMonth = getAccumulatedMonth(money, expensesMonth);\nconsole.log(\"Накопления за месяц: \" + accumulatedMonth); //период достижения цели\n\nvar getTargetMonth = function getTargetMonth(mission, accumulatedMonth) {\n  return +mission / +accumulatedMonth;\n};\n\nvar budgetDay = accumulatedMonth / 30;\nvar resGetTargetMonth = Math.ceil(getTargetMonth(mission, accumulatedMonth));\n\nif (resGetTargetMonth > 0) {\n  console.log(\"Цель будет достигнута за: \" + resGetTargetMonth + \" месяцев\");\n} else {\n  console.log(\"Цель не будет достигнута\");\n}\n\nconsole.log(\"Бюджет на день: \" + Math.floor(budgetDay));\n\nvar getStatusIncome = function getStatusIncome() {\n  if (budgetDay >= 1200) {\n    return \"У вас высокий уровень дохода\";\n  } else if (budgetDay > 600 && budgetDay < 1200) {\n    return \"У вас средний уровень дохода\";\n  } else if (budgetDay <= 600) {\n    return \"К сожалению у вас уровень дохода ниже среднего\";\n  } else console.log(\"Что то пошло не так\");\n};\n\nconsole.log(getStatusIncome());"]}